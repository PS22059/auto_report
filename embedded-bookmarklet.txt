javascript:(function(){
  // Full script embedded to avoid CORS issues
  function isInsideHidden(el) {
    return el.closest('[aria-hidden="true"]') !== null;
  }
  
  function randomDelay(min = 1000, max = 2000) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }
  
  async function clickByText(text, delay = 2000) {
    return new Promise((resolve) => {
      setTimeout(() => {
        const el = Array.from(document.querySelectorAll('span'))
          .find(span => span.innerText.trim() === text);
        if (el && !isInsideHidden(el)) {
          const btn = el.closest('[role="button"], div[tabindex]');
          if (btn && !isInsideHidden(btn)) {
            btn.click();
            console.log(`‚úÖ ƒê√£ click v√†o: '${text}'`);
          } else {
            el.click();
            console.log(`‚ö†Ô∏è Click tr·ª±c ti·∫øp v√†o span: '${text}'`);
          }
          resolve(true);
        } else {
          console.log(`‚ùå Kh√¥ng t√¨m th·∫•y ho·∫∑c ph·∫ßn t·ª≠ '${text}' n·∫±m trong aria-hidden`);
          resolve(false);
        }
      }, delay);
    });
  }
  
  async function clickStepsInOrder(steps = [], delay = 2000) {
    for (const step of steps) {
      let clicked = false;
      for (let i = 0; i < 5; i++) {
        const el = Array.from(document.querySelectorAll('span'))
          .find(span => span.innerText.trim() === step);
        if (el && !isInsideHidden(el)) {
          const btn = el.closest('[role="button"], div[tabindex]');
          if (btn && !isInsideHidden(btn)) {
            btn.click();
            console.log(`‚úÖ ƒê√£ click v√†o: '${step}'`);
          } else {
            el.click();
            console.log(`‚ö†Ô∏è Click tr·ª±c ti·∫øp v√†o span: '${step}'`);
          }
          clicked = true;
          break;
        }
        await new Promise(resolve => setTimeout(resolve, delay));
      }
      if (!clicked) {
        console.log(`‚ùå Kh√¥ng t√¨m th·∫•y n√∫t '${step}' sau khi th·ª≠ nhi·ªÅu l·∫ßn ho·∫∑c n·∫±m trong aria-hidden`);
      } else {
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  }
  
  async function reportPostSimple(postIndex) {
    const postActions = document.querySelectorAll('div[aria-label="H√†nh ƒë·ªông v·ªõi b√†i vi·∫øt n√†y"]');
    if (!postActions[postIndex]) {
      console.log(`‚ùå Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt th·ª© ${postIndex + 1}`);
      return;
    }
  
    const parent = postActions[postIndex];
    const overlay = parent.querySelector('div[role="none"]');
    if (!overlay || isInsideHidden(overlay)) {
      console.log(`‚ùå Kh√¥ng t√¨m th·∫•y n√∫t m·ªü menu ho·∫∑c b·ªã ·∫©n ·ªü b√†i vi·∫øt th·ª© ${postIndex + 1}`);
      return;
    }
  
    const anonymous = parent.querySelector('div[role="button"][tabindex="0"]');
    if (anonymous?.innerText.trim() === "Ng∆∞·ªùi tham gia ·∫©n danh") {
      console.log(`‚ö†Ô∏è B·ªè qua b√†i vi·∫øt ${postIndex + 1} v√¨ l√† 'Ng∆∞·ªùi tham gia ·∫©n danh'`);
      return;
    }
  
    overlay.click();
    console.log(`üìå ƒê√£ m·ªü menu b√†i vi·∫øt th·ª© ${postIndex + 1}`);
    await new Promise(resolve => setTimeout(resolve, randomDelay()));
  
    const spans = Array.from(document.querySelectorAll('span')).filter(span =>
      span.innerText.trim() === "B√°o c√°o b√†i vi·∫øt"
    );
  
    const validSpans = spans.filter(span => {
      const container = span.closest('div');
      const text = container?.innerText?.toLowerCase() || '';
      return !text.includes("qu·∫£n tr·ªã vi√™n nh√≥m") && !isInsideHidden(span);
    });
  
    if (validSpans.length > 0) {
      const el = validSpans[0];
      const btn = el.closest('[role="button"], div[tabindex]');
      if (btn && !isInsideHidden(btn)) {
        btn.click();
        console.log("‚úÖ ƒê√£ click v√†o n√∫t 'B√°o c√°o b√†i vi·∫øt'");
      } else {
        el.click();
        console.log("‚ö†Ô∏è Click tr·ª±c ti·∫øp v√†o span 'B√°o c√°o b√†i vi·∫øt'");
      }
    } else {
      console.log("‚ùå Kh√¥ng t√¨m th·∫•y n√∫t 'B√°o c√°o b√†i vi·∫øt' ph√π h·ª£p");
      return;
    }
  
    await new Promise(resolve => setTimeout(resolve, randomDelay()));
  
    const reason1 = await clickByText("Th√¥ng tin sai s·ª± th·∫≠t, l·ª´a ƒë·∫£o ho·∫∑c gian l·∫≠n", randomDelay());
    if (!reason1) return;
  
    await new Promise(resolve => setTimeout(resolve, randomDelay()));
  
    const reason2 = await clickByText("Gian l·∫≠n ho·∫∑c l·ª´a ƒë·∫£o", randomDelay());
    if (!reason2) return;
  
    await new Promise(resolve => setTimeout(resolve, randomDelay()));
    await clickStepsInOrder(["G·ª≠i", "Ti·∫øp", "Xong"], randomDelay());
  }
  
  async function scrollUntilPostsFound(maxScrolls = 30, delay = 1500) {
    let scrolls = 0;
    while (scrolls < maxScrolls) {
      const posts = document.querySelectorAll('div[aria-label="H√†nh ƒë·ªông v·ªõi b√†i vi·∫øt n√†y"]');
      if (posts.length > 0) {
        console.log(`‚úÖ T√¨m th·∫•y ${posts.length} b√†i vi·∫øt. B·∫Øt ƒë·∫ßu x·ª≠ l√Ω.`);
        return true;
      }
  
      console.log(`üîÑ [${scrolls + 1}] Ch∆∞a c√≥ b√†i vi·∫øt. ƒêang cu·ªôn...`);
  
      window.scrollBy({ top: 1000, behavior: 'smooth' });
  
      // M√¥ ph·ªèng t∆∞∆°ng t√°c ng∆∞·ªùi d√πng b·∫±ng c√°ch hover nh·∫π
      const hoverZone = document.elementFromPoint(200, 200);
      if (hoverZone) hoverZone.dispatchEvent(new MouseEvent('mouseover', { bubbles: true }));
  
      await new Promise(resolve => setTimeout(resolve, delay + randomDelay(500, 1000)));
      scrolls++;
    }
    console.log("‚ùå ƒê√£ cu·ªôn t·ªëi ƒëa m√† kh√¥ng t√¨m th·∫•y b√†i vi·∫øt.");
    return false;
  }
  
  (async () => {
    console.log("üöÄ Auto Report Script ƒëang ch·∫°y...");
    const found = await scrollUntilPostsFound(30, 1500);
    if (!found) return;
  
    const posts = document.querySelectorAll('div[aria-label="H√†nh ƒë·ªông v·ªõi b√†i vi·∫øt n√†y"]');
    console.log(`üîç B·∫Øt ƒë·∫ßu b√°o c√°o ${posts.length} b√†i vi·∫øt.`);
  
    for (let i = 0; i < posts.length; i++) {
      console.log(`\nüöÄ ƒêang x·ª≠ l√Ω b√†i vi·∫øt th·ª© ${i + 1}`);
      await reportPostSimple(i);
      await new Promise(resolve => setTimeout(resolve, randomDelay(2000, 3000)));
    }
  
    console.log("\n‚úÖ ƒê√£ ho√†n t·∫•t x·ª≠ l√Ω t·∫•t c·∫£ c√°c b√†i vi·∫øt.");
  })();
})(); 